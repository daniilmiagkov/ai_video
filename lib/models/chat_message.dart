import 'server_message.dart';
import 'user_message.dart';

enum ChatMessageType {
  textMd,
  image,
  system,
  // –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏—Ç—å: code, video, file, etc.
}

class ChatMessage {
  final String id;
  final bool isUser;
  final ChatMessageType type;
  final dynamic body;

  ChatMessage({
    required this.id,
    required this.isUser,
    required this.type,
    required this.body,
  });

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ `UserMessage` (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
  factory ChatMessage.fromUser(UserMessage userMsg) {
    return ChatMessage(
      id: userMsg.id,
      isUser: true,
      type: ChatMessageType.textMd,
      body: userMsg.text,
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ `ServerMessage` (–æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞)
  factory ChatMessage.fromServer(ServerMessage serverMsg) {
    if (serverMsg is TextMessage) {
      return ChatMessage(
        id: serverMsg.id,
        isUser: false,
        type: ChatMessageType.textMd,
        body: serverMsg.text,
      );
    } else if (serverMsg is TypingMessage) {
      return ChatMessage(
        id: 'typing-${DateTime.now().millisecondsSinceEpoch}',
        isUser: false,
        type: ChatMessageType.system,
        body: 'ü§ñ –ü–µ—á–∞—Ç–∞–µ—Ç...',
      );
    } else if (serverMsg is ErrorMessage) {
      return ChatMessage(
        id: 'error-${DateTime.now().millisecondsSinceEpoch}',
        isUser: false,
        type: ChatMessageType.system,
        body: '‚ö†Ô∏è –û—à–∏–±–∫–∞: ${serverMsg.message}',
      );
    } else if (serverMsg is DoneMessage) {
      // –ú–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ
      return ChatMessage(
        id: 'done-${DateTime.now().millisecondsSinceEpoch}',
        isUser: false,
        type: ChatMessageType.system,
        body: '‚úÖ –û—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω',
      );
    }

    throw Exception('Unknown ServerMessage type');
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'isUser': isUser,
      'type': type.name,
      'body': body,
    };
  }

  factory ChatMessage.fromJson(Map<String, dynamic> json) {
    return ChatMessage(
      id: json['id'] ?? '',
      isUser: json['isUser'] ?? false,
      type: ChatMessageType.values.firstWhere(
        (e) => e.name == json['type'],
        orElse: () => ChatMessageType.textMd,
      ),
      body: json['body'],
    );
  }
}
