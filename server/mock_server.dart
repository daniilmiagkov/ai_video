import 'dart:io';
import 'dart:convert';
import 'dart:math';

void main() async {
  final random = Random();
  final server = await HttpServer.bind('0.0.0.0', 8080);
  print('üöÄ WebSocket mock server listening on ws://localhost:8080');

  await for (var request in server) {
    if (WebSocketTransformer.isUpgradeRequest(request)) {
      final socket = await WebSocketTransformer.upgrade(request);

      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      socket.add(jsonEncode({
        'type': 'text',
        'id': 'assistant-welcome',
        'text': '''
üëã **–ü—Ä–∏–≤–µ—Ç!** –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç.

> –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ‚Äë–Ω–∏–±—É–¥—å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É –∑–∞–º–æ–∫–∞–Ω–Ω—ã–º Markdown.**
'''
      }));

      socket.listen((data) {
        final msg = jsonDecode(data as String);
        final userText = msg['text']?.toString().trim() ?? '';
        print('üì© User message: $userText');

        // –°–∏–≥–Ω–∞–ª ¬´–ø–µ—á–∞—Ç–∞–µ—Ç¬ª
        socket.add(jsonEncode({'type': 'typing'}));

        // –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        Future.delayed(Duration(milliseconds: 400 + random.nextInt(600)), () {
          // –û–±—â–∏–µ —à–∞–±–ª–æ–Ω—ã Markdown‚Äë–æ—Ç–≤–µ—Ç–æ–≤
          final templates = [
            () => '''
#### –í–∞—à –∑–∞–ø—Ä–æ—Å
> **${userText}**

–í–æ—Ç –º–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å **–∂–∏—Ä–Ω—ã–º**, _–∫—É—Ä—Å–∏–≤–æ–º_ –∏ [—Å—Å—ã–ª–∫–æ–π](https://example.com).
''',
            () => '''
**–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ç–µ–º–µ "${userText}":**
1. –®–∞–≥ **–ø–µ—Ä–≤—ã–π**  
2. –®–∞–≥ _–≤—Ç–æ—Ä–æ–π_  
3. **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ**

_–£–¥–∞—á–∏!_ üöÄ
''',
            () => '''
| –ü–∞—Ä–∞–º–µ—Ç—Ä        | –ó–Ω–∞—á–µ–Ω–∏–µ                      |
|-----------------|-------------------------------|
| –ó–∞–ø—Ä–æ—Å          | `${userText}`                 |
| –í—Ä–µ–º—è           | ${DateTime.now().toIso8601String()} |
| –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ | ${random.nextInt(100)}        |
''',
            () => '''
> "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ü–∏—Ç–∞—Ç—ã –ø–æ —Ç–µ–º–µ **${userText}**."

- –ü—É–Ω–∫—Ç A  
- –ü—É–Ω–∫—Ç B  

**–ö–æ–Ω–µ—Ü —Ü–∏—Ç–∞—Ç—ã**
''',
            () => '''
```json
{
  "request": "${userText}",
  "status": "ok",
  "timestamp": "${DateTime.now().toUtc().toIso8601String()}"
}
–ù–∞–¥–µ—é—Å—å, –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω–æ!
'''
];

      final responseText = templates[random.nextInt(templates.length)]();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
      socket.add(jsonEncode({
        'type': 'text',
        'id': 'assistant-${DateTime.now().millisecondsSinceEpoch}',
        'text': responseText,
      }));
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º done
      socket.add(jsonEncode({'type': 'done'}));
    });
  });

} else {
  request.response
    ..statusCode = HttpStatus.forbidden
    ..close();
}
}
}