import 'dart:io';
import 'dart:convert';
import 'dart:math';

void main() async {
  final random = Random();
  final server = await HttpServer.bind('0.0.0.0', 8080);
  print('üöÄ WebSocket mock server listening on ws://localhost:8080');

  await for (var request in server) {
    if (!WebSocketTransformer.isUpgradeRequest(request)) {
      request.response
        ..statusCode = HttpStatus.forbidden
        ..close();
      continue;
    }

    final socket = await WebSocketTransformer.upgrade(request);
    print('üîå Client connected from ${request.connectionInfo?.remoteAddress.address}');

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final welcome = {
      'type': 'text',
      'id': 'assistant-welcome',
      'text': '''
üëã **–ü—Ä–∏–≤–µ—Ç!** –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç.

> –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É!**
'''
    };
    socket.add(jsonEncode(welcome));
    print('‚û°Ô∏è Sent welcome message');

    socket.listen(
      (data) {
        print('‚¨ÖÔ∏è Raw data received: ${data.runtimeType}, length: ${data.toString().length}');
        Map<String, dynamic> msg;
        try {
          msg = jsonDecode(data as String) as Map<String, dynamic>;
        } catch (e) {
          print('‚ùå JSON decode error: $e');
          socket.add(jsonEncode({
            'type': 'error',
            'message': 'Invalid JSON',
          }));
          return;
        }

        // –ï—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ Base64
        if (msg['type'] == 'attachment') {
          final name = msg['fileName'] ?? 'file';
          final mime = msg['mimeType'] ?? 'application/octet-stream';
          final b64 = msg['data'] as String? ?? '';
          List<int> bytes;
          try {
            bytes = base64Decode(b64);
          } catch (e) {
            print('‚ùå Base64 decode error: $e');
            socket.add(jsonEncode({
              'type': 'error',
              'message': 'Invalid attachment data',
            }));
            return;
          }
          final size = bytes.length;
          print('üì© Attachment: name=$name, mime=$mime, size=$size bytes');

          // –û—Ç–≤–µ—Ç –æ —Ñ–∞–π–ª–µ
          final reply = {
            'type': 'text',
            'id': 'assistant-${DateTime.now().millisecondsSinceEpoch}',
            'text': '''
### –í–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ
- **–ò–º—è —Ñ–∞–π–ª–∞:** $name  
- **MIME‚Äë—Ç–∏–ø:** $mime  
- **–†–∞–∑–º–µ—Ä:** $size –±–∞–π—Ç  

_–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!_ üéâ
'''
          };
          socket.add(jsonEncode(reply));
          print('‚û°Ô∏è Sent attachment info');
          socket.add(jsonEncode({'type': 'done'}));
          print('‚û°Ô∏è Sent done after attachment');
          return;
        }

        // –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final userText = msg['text']?.toString().trim() ?? '';
        print('üì© Text message: "$userText"');

        socket.add(jsonEncode({'type': 'typing'}));
        print('‚û°Ô∏è Sent typing');

        Future.delayed(Duration(milliseconds: 400 + random.nextInt(600)), () {
          final templates = [
            () => '''
#### –í–∞—à –∑–∞–ø—Ä–æ—Å
> **$userText**

–í–æ—Ç –º–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: **–∂–∏—Ä–Ω—ã–º**, _–∫—É—Ä—Å–∏–≤_, [—Å—Å—ã–ª–∫–∞](https://example.com).
''',
            () => '''
**–®–∞–≥–∏ –ø–æ —Ç–µ–º–µ ¬´$userText¬ª:**
1. –®–∞–≥ **1**  
2. –®–∞–≥ _2_  
3. ‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ
''',
            () => '''
```json
{
  "request": "$userText",
  "status": "ok",
  "timestamp": "${DateTime.now().toUtc().toIso8601String()}"
}
'''
];
      final responseText = templates[random.nextInt(templates.length)]();
final reply = {
'type': 'text',
'id': 'assistant-${DateTime.now().millisecondsSinceEpoch}',
'text': responseText,
};
socket.add(jsonEncode(reply));
print('‚û°Ô∏è Sent text reply');
socket.add(jsonEncode({'type': 'done'}));
print('‚û°Ô∏è Sent done');
});
},
onError: (err) {
print('‚ùå WebSocket error: $err');
},
onDone: () {
print('üîí Client disconnected');
},
cancelOnError: true,
);
}
}